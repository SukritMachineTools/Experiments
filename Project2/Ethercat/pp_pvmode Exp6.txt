from tkinter import *
from PIL import Image, ImageTk
# from tkinter import ttk
import pysoem
import ctypes
import time
import math
from threading import Thread, Lock

master = pysoem.Master()

# ------------------------------------
# Read
pav = 0x6064
opm=0x6061

# -----------------------------------
# Write
opmode = 0x6060
tpos = 0x607A
pvel = 0x6081
pacc = 0x6083
pdec = 0x6084
parasub = 00
# ----------------------------------------
#Assumption
ppr=1000
freq=500
tsec=ppr/freq
rpm=60/tsec
#Acceleration and Deaccleration
pacw = 20000
pdw = 20000
# ----------------------------------------
global opmr
def decimalToBinary(n):
    return bin(n).replace("0b", "")
    # return bin(n)

def binaryToDecimal(n):
    return int(n,2)

master.open('\\Device\\NPF_{43350287-BA24-4787-A337-A02C7CE4AEA2}')
if master.config_init() > 0:
    for device in master.slaves:
        print(f'Found Device {device.name}')
        pavr = ctypes.c_uint32.from_buffer_copy(device.sdo_read(index=pav, subindex=parasub)).value
        print(pavr)
        pavr = str(pavr)
        opmr = ctypes.c_uint8.from_buffer_copy(device.sdo_read(index=opm, subindex=parasub)).value
        opmr = str(opmr)


def upread():
    while True:
        if master.config_init() > 0:
            for device in master.slaves:
                pavr = ctypes.c_uint32.from_buffer_copy(device.sdo_read(index=pav, subindex=parasub)).value
                pavr = str(pavr)
                opmr = ctypes.c_uint8.from_buffer_copy(device.sdo_read(index=opm, subindex=parasub)).value
                opmr = str(opmr)
        if opmr=="3":
            jbtn.configure(relief="sunken",bg="#3366ff")
            abtn.configure(relief="raised",bg="blue")
        elif opmr=="1":
            abtn.configure(relief="sunken",bg="#3366ff")
            jbtn.configure(relief="raised",bg="blue")
        else:
            jbtn.configure(relief="raised",bg="blue")
            abtn.configure(relief="raised",bg="blue")
        pavvalue.set(pavr)
        time.sleep(0.1)
    pass

def writejogM():
    #PV Mode
    opmodew = 3
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
    print(opmodew)
    pass
def writeabsM():
    #PP Mode
    opmodew = 1
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
    print(opmodew)
    pass

def writejog():
    #sending target velocity
    jspw = jspeedvalue.get()
    # pacw = 10000
    # pdw=10000
    if "." in jspw:
        jspws=jspw.split(".")
        jspw=jspws[0]
    print(jspw)
    if jspw != "":
        jspw = int(jspw)
        if master.config_init() > 0:
            for device in master.slaves:
                # device.sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
                # device.sdo_write(0x607A, 0, bytes(ctypes.c_uint32(tpw)))
                device.sdo_write(0x60FF, 0, bytes(ctypes.c_uint32(jspw)))
                # device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(cww)))
                device.sdo_write(0x6083, 0, bytes(ctypes.c_uint32(pacw)))
                device.sdo_write(0x6084, 0, bytes(ctypes.c_uint32(pdw)))

    jspeedvalue.set(str(jspw)+".000")
    print( jspw, pacw, pdw)
    pass

def writeabs():
    psw= posvalue.get()
    aspw = aspeedvalue.get()
    if '.' in aspw:
        aspws=aspw.split(".")
        aspw=aspws[0]
    # pacw = 20000
    # pdw=10000
    print(aspw)
    psw=int(psw)
    aspw = int(aspw)
    if master.config_init() > 0:
        for device in master.slaves:
            # device.sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
            # device.sdo_write(0x607A, 0, bytes(ctypes.c_uint32(tpw)))
            device.sdo_write(0x607A, 0, bytes(ctypes.c_uint32(psw)))
            device.sdo_write(0x6081, 0, bytes(ctypes.c_uint32(aspw)))
            # device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(cww)))
            device.sdo_write(0x6083, 0, bytes(ctypes.c_uint32(pacw)))
            device.sdo_write(0x6084, 0, bytes(ctypes.c_uint32(pdw)))

    aspeedvalue.set(str(aspw)+".000")
    print(psw, aspw, pacw, pdw)
    pass


def poweron():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
    pass
def startmotor():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
    pass
def quickstop():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
    pass
def jogL():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x607E, 0, bytes(ctypes.c_uint8(0)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
    pass
def jogR():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x607E, 0, bytes(ctypes.c_uint8(64)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
    pass

def poweronA():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
    pass
def startmotorA():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
    pass
def quickstopA():
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
    pass
def quickstopEBL(event):
    jLbutton.unbind("<ButtonRelease>")
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
    pass
def quickstopEBR(event):
    jRbutton.unbind("<ButtonRelease>")
    if master.config_init() > 0:
        for device in master.slaves:
            device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
    pass
def jogLEB(event):
    jogL()
    jLbutton.bind("<ButtonRelease>", quickstopEBL)
    pass
def jogREB(event):
    jogR()
    jRbutton.bind("<ButtonRelease>", quickstopEBR)
    pass


root = Tk()
root.geometry("800x680")
root.title("Sukrit Machine Tools")
# root.wm_iconbitmap('sukrit_Logo.ico')
root.configure(background="#b3ffe0")

frame1 = Frame(root, highlightbackground="blue", highlightthickness=1, bg="#b3ffe0")
# logoimg = ImageTk.PhotoImage(
#     Image.open('sukrit_Logo.png').resize((150, 70), Image.Resampling.LANCZOS))
# Label(frame1, image=logoimg, bg="#b3ffe0").grid(row=0, column=0)
Label(frame1, text="               ", font="Algerian 27 bold", padx=7, pady=7, bg="#b3ffe0").grid(row=0, column=1,
                                                                                                  padx=10)
Entry(frame1, font="Calibri 11", width=11).grid(row=0, column=2)
Label(frame1, text="Servo Window", fg="#cc3300", font="Algerian 27 bold", padx=7, pady=7, bg="#b3ffe0").grid(row=0,
                                                                                                             column=3,
                                                                                                             padx=10)
frame1.grid(row=0, ipadx=50, sticky="ew")
frame2 = Frame(root, bg="blue", height=15)
# wlabel=Label(frame2,text="",bg="blue",height=10).grid(row=1)
frame2.grid(row=1, ipadx=400, sticky='ew')

frame3 = Frame(root, highlightbackground="blue", width=300, height=100, highlightthickness=2, bg="#b3ffe0")


frame4 = Frame(frame3, highlightbackground="blue", width=50, height=100, highlightthickness=0, bg="#b3ffe0")
Label(frame4, text="Target Position", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=0, column=0)
tpvalue = StringVar()

Entry(frame4, width=10, font="Arial_Black 12 bold", ).grid(row=0, column=1)
Button(frame4, text="Send", padx=30,pady=10, bg="blue", fg="white").grid(row=0, column=1,padx=10,pady=10)
Label(frame4, text="Postion Actual Value", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=0, column=3)
pavvalue = StringVar()
pavvalue.set(pavr)
Entry(frame4, width=10, textvariable=pavvalue, font="Arial_Black 12 bold", ).grid(row=0, column=4)
frame4.grid(row=1, column=0, ipadx=33.5, sticky="w")

frame7 = Frame(frame3, highlightbackground="blue", width=50, height=90, highlightthickness=1, bg="#b3ffe0")
Label(frame7, text="Mode", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=0, column=0)

jbtn=Button(frame7,command=writejogM, text="Jog", padx=30,pady=10, bg="blue", fg="white")
jbtn.grid(row=0, column=1,padx=10,pady=10)
Button(frame7, command=poweronA, text="Servo On", padx=30,pady=10, bg="green", fg="white").grid(row=0, column=2,padx=10,pady=10)
jLbutton = Button(frame7, text="<--", padx=30,pady=10, bg="#ff9933", )
jLbutton.bind("<ButtonPress>",jogLEB)
jLbutton.bind("<ButtonRelease-1>",quickstopEBL)
jLbutton.grid(row=1, column=1,padx=10,pady=10)

jRbutton=Button(frame7, text="-->", padx=30,pady=10, bg="#ff9933", )
jRbutton.bind("<Button-1>",jogREB)
jRbutton.bind("<ButtonRelease-1>",quickstopEBR)
jRbutton.grid(row=1, column=2,padx=10,pady=10)
Button(frame7, command=quickstop, text="Quick Stop", padx=30,pady=10, bg="red", fg="white").grid(row=1, column=3,padx=10,pady=10)
Label(frame7, text="Speed", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=2, column=0)
jspeedvalue = StringVar()
Entry(frame7,textvariable=jspeedvalue, width=10, font="Arial_Black 12 bold", ).grid(row=2, column=1)
Label(frame7, text="(mm/s)", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=2, column=2)
Button(frame7,command=writejog, text="Send", padx=30,pady=10, bg="blue", fg="white").grid(row=2, column=3,padx=10,pady=10)
frame7.grid(row=2, column=0, ipadx=72, sticky="w")

frame8 = Frame(frame3, highlightbackground="blue", width=50, height=90, highlightthickness=1, bg="#b3ffe0")
Label(frame8, text="Move", font="Calibri 16 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=0, column=1)
Label(frame8, text="Mode", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=1, column=0)
abtn=Button(frame8,command=writeabsM, text="ABS", padx=30,pady=10, bg="blue", fg="white")
abtn.grid(row=1, column=1,padx=10,pady=10)
Button(frame8, command=poweronA, text="Power On", padx=30,pady=10, bg="green", fg="white").grid(row=1, column=2,padx=10,pady=10)
Button(frame8, command=startmotorA, text="Start Motor", padx=30,pady=10, bg="yellow", fg="black").grid(row=1, column=3,padx=10,pady=10)
Button(frame8, command=quickstopA, text="Quick Stop", padx=30,pady=10, bg="red", fg="white").grid(row=1, column=4,padx=10,pady=10)
Label(frame8, text="Pos to Go", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=2, column=0)
posvalue=StringVar()
Entry(frame8, textvariable=posvalue,width=10, font="Arial_Black 12 bold", ).grid(row=2, column=1)
Label(frame8, text="Speed", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=2, column=2)
aspeedvalue=StringVar()
Entry(frame8,textvariable=aspeedvalue, width=10, font="Arial_Black 12 bold", ).grid(row=2, column=3)
Label(frame8, text="(mm/sec)", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
      fg="blue").grid(row=2, column=4)
Button(frame8,command=writeabs, text="Send", padx=30,pady=10, bg="blue", fg="white").grid(row=2, column=5,padx=10,pady=10)
frame8.grid(row=3, column=0, ipadx=72, sticky="w")
frame3.grid(row=2, column=0, ipadx=33.5, sticky="ew")

frame5 = Frame(root, bg="blue", height=10)
frame5.grid(row=3, ipadx=400, sticky='ew')

frame6 = Frame(root, highlightbackground="blue", highlightthickness=0, bg="#b3ffe0")


Button(frame6, command=poweron, text="Power On", padx=30,pady=10, bg="green", fg="white").grid(row=2, column=0,padx=10,pady=10)
Button(frame6, command=startmotor, text="Start Motor", padx=30,pady=10, bg="yellow", fg="black").grid(row=2, column=1,padx=10,pady=10)
Button(frame6, command=quickstop, text="Quick Stop", padx=30,pady=10, bg="red", fg="white").grid(row=2, column=2,padx=10,pady=10)


frame6.grid(row=4, ipadx=20, sticky='ew')
tp = Thread(target=upread)
# set daemon: polling thread will exit if main thread exit
tp.daemon = True
tp.start()



root.mainloop()
