from tkinter import *
from PIL import Image, ImageTk
# from tkinter import ttk
import pysoem
import ctypes
import time
import math
from threading import Thread, Lock
import importlib
import threading
master = pysoem.Master()

portName= '\Device\\NPF_{C34C5E96-73BF-4F62-BB45-72A16AC285AC}'
# ------------------------------------
# Read
pav = 0x6064
opm = 0x6061

# -----------------------------------
# Write
opmode = 0x6060
tpos = 0x607A
pvel = 0x6081
pacc = 0x6083
pdec = 0x6084
parasub = 00
# ----------------------------------------
# Assumption
ppr = 1000
freq = 500
tsec = ppr / freq
rpm = 60 / tsec
# Acceleration and Deaccleration
pacw = 20000
pdw = 20000
# ----------------------------------------
global opmr  # operation mode variable


# binary-descimal conversions
def decimalToBinary(n):
    return bin(n).replace("0b", "")
    # return bin(n)


def binaryToDecimal(n):
    return int(n, 2)


# -------------------------------------------------

class rtest10(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        self.running = True

    def run(self):
        while self.running:
            # Your thread logic here
            print("Thread is running...")
            if master.config_init() > 0:
                # pavr = ctypes.c_uint32.from_buffer_copy(master.slaves[0].sdo_read(index=pav, subindex=parasub)).value
                # # print(pavr)
                # pavr = str(pavr)
                # opmr = ctypes.c_uint8.from_buffer_copy(master.slaves[0].sdo_read(index=opm, subindex=parasub)).value
                # opmr = str(opmr)
                global opmr
                for device in master.slaves:
                    pavr = ctypes.c_uint32.from_buffer_copy(device.sdo_read(index=pav, subindex=parasub)).value
                    pavr = str(pavr)
                    opmr = ctypes.c_uint8.from_buffer_copy(device.sdo_read(index=opm, subindex=parasub)).value
                    opmr = str(opmr)
            if opmr == "3":
                jbtn.configure(relief="sunken", bg="#3366ff")
                abtn.configure(relief="raised", bg="blue")
            elif opmr == "1":
                abtn.configure(relief="sunken", bg="#3366ff")
                jbtn.configure(relief="raised", bg="blue")
            else:
                jbtn.configure(relief="raised", bg="blue")
                abtn.configure(relief="raised", bg="blue")
            pavvalue.set(pavr)
            time.sleep(0.1)


    def stop(self):
        self.running = False

    def rtest10Frame(self):

        # initial = importlib.import_module("rtest8")
        # self.root = initial.home.start(self)
        # self.root.wm_iconbitmap('sukrit_Logo.ico')
        self.root.configure(background="#b3ffe0")

        master.open(portName)
        if master.config_init() > 0:
            pavr = ctypes.c_uint32.from_buffer_copy(master.slaves[0].sdo_read(index=pav, subindex=parasub)).value
            print(pavr)
            pavr = str(pavr)
            opmr = ctypes.c_uint8.from_buffer_copy(master.slaves[0].sdo_read(index=opm, subindex=parasub)).value
            opmr = str(opmr)
            # for device in master.slaves:
            #     print(f'Found Device {device.name}')
            #     pavr = ctypes.c_uint32.from_buffer_copy(device.sdo_read(index=pav, subindex=parasub)).value
            #     print(pavr)
            #     pavr = str(pavr)
            #     opmr = ctypes.c_uint8.from_buffer_copy(device.sdo_read(index=opm, subindex=parasub)).value
            #     opmr = str(opmr)

        # ------------------------------------------------------
        def rtest2f():
            # tp10.daemon=False
            # tp10.join()
            opmr=0
            thread11.stop()
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            frame4.destroy()
            frame5.destroy()
            frame6.destroy()
            frame7.destroy()
            frame8.destroy()
            # from pressBrakeP import pressBrake
            # pb=pressBrake()
            # pb.pressBrakeFrame()
            pb = importlib.import_module("rtest2")
            pb.rtest2.rtest2Frame(self)
            pass

        # Thread Function
        def upread():
            while True:
                if master.config_init() > 0:
                    # pavr = ctypes.c_uint32.from_buffer_copy(master.slaves[0].sdo_read(index=pav, subindex=parasub)).value
                    # # print(pavr)
                    # pavr = str(pavr)
                    # opmr = ctypes.c_uint8.from_buffer_copy(master.slaves[0].sdo_read(index=opm, subindex=parasub)).value
                    # opmr = str(opmr)
                    for device in master.slaves:
                        pavr = ctypes.c_uint32.from_buffer_copy(device.sdo_read(index=pav, subindex=parasub)).value
                        pavr = str(pavr)
                        opmr = ctypes.c_uint8.from_buffer_copy(device.sdo_read(index=opm, subindex=parasub)).value
                        opmr = str(opmr)
                if opmr == "3":
                    jbtn.configure(relief="sunken", bg="#3366ff")
                    abtn.configure(relief="raised", bg="blue")
                elif opmr == "1":
                    abtn.configure(relief="sunken", bg="#3366ff")
                    jbtn.configure(relief="raised", bg="blue")
                else:
                    jbtn.configure(relief="raised", bg="blue")
                    abtn.configure(relief="raised", bg="blue")
                pavvalue.set(pavr)
                time.sleep(0.1)
            pass



        def writejogM():
            # PV Mode
            opmodew = 3
            if master.config_init() > 0:
                # master.slaves[0].sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
                for device in master.slaves:
                    device.sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
            print(opmodew)
            pass

        def writeabsM():
            # PP Mode
            opmodew = 1
            if master.config_init() > 0:
                # master.slaves[0].sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
                for device in master.slaves:
                    device.sdo_write(0x6060, 0, bytes(ctypes.c_uint8(opmodew)))
            print(opmodew)
            pass

        def writejog():
            jspw = jspeedvalue.get()
            print(jspw)
            if jspw != "":
                jspw = float(jspw) * 1000
                jspw = int(jspw)
                print(jspw)
                if master.config_init() > 0:
                    master.slaves[0].sdo_write(0x60FF, 0, bytes(ctypes.c_uint32(jspw)))
                    master.slaves[0].sdo_write(0x6083, 0, bytes(ctypes.c_uint32(pacw)))
                    master.slaves[0].sdo_write(0x6084, 0, bytes(ctypes.c_uint32(pdw)))
                    # for device in master.slaves:
                    #     device.sdo_write(0x60FF, 0, bytes(ctypes.c_uint32(jspw)))
                    #     device.sdo_write(0x6083, 0, bytes(ctypes.c_uint32(pacw)))
                    #     device.sdo_write(0x6084, 0, bytes(ctypes.c_uint32(pdw)))
                    #     print( jspw, pacw, pdw)
            jspeedvalue.set(f'{(jspw / 1000):.3f}')
            print(jspw, pacw, pdw)
            pass

        def writeabs():
            # sending target position
            # sending profile velocity
            psw = posvalue.get()
            aspw = aspeedvalue.get()
            print(aspw)
            psw = float(psw) * 1000
            psw = int(psw)
            aspw = float(aspw) * 1000
            aspw = int(aspw)
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x607A, 0, bytes(ctypes.c_uint32(psw)))
                master.slaves[0].sdo_write(0x6081, 0, bytes(ctypes.c_uint32(aspw)))
                master.slaves[0].sdo_write(0x6083, 0, bytes(ctypes.c_uint32(pacw)))
                master.slaves[0].sdo_write(0x6084, 0, bytes(ctypes.c_uint32(pdw)))
                # for device in master.slaves:
                #     device.sdo_write(0x607A, 0, bytes(ctypes.c_uint32(psw)))
                #     device.sdo_write(0x6081, 0, bytes(ctypes.c_uint32(aspw)))
                #     device.sdo_write(0x6083, 0, bytes(ctypes.c_uint32(pacw)))
                #     device.sdo_write(0x6084, 0, bytes(ctypes.c_uint32(pdw)))

            aspeedvalue.set(f'{(aspw / 1000):.3f}')
            posvalue.set(f'{(psw / 1000):.3f}')
            print(psw, aspw, pacw, pdw)
            pass

        # ************************************************************************
        # general functions poweron (hold position), startmotor position, quickstop
        def poweron():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            pass

        def startmotor():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            pass

        def quickstop():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
            pass

        def hold():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
            pass

        # ************************************************************************************
        # Anti-Clcckwise and Clockwise Jogging
        def jogL():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x607E, 0, bytes(ctypes.c_uint8(0)))  # Anti-Clock polarity
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                # for device in master.slaves:
                #     device.sdo_write(0x607E, 0, bytes(ctypes.c_uint8(0))) #Anti-Clock polarity
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            pass

        def jogR():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x607E, 0, bytes(ctypes.c_uint8(64)))  # Clock Polarity
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                # for device in master.slaves:
                #     device.sdo_write(0x607E, 0, bytes(ctypes.c_uint8(64))) #Clock Polarity
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(15)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                #     # device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            pass

        # poweron (hold position) in Jog Mode
        def poweronJ():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            pass

        # poweron(hold), startmotor, quickstop position
        def poweronA():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(0)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(6)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(7)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            pass

        def startmotorA():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(47)))
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(31)))
            pass

        def quickstopA():
            if master.config_init() > 0:
                master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
                # for device in master.slaves:
                #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(256)))
            pass

        # ********************************************************************
        # upon releasing mouse motor will stop running
        def quickstopEBL(event):
            jLbutton.unbind("<ButtonRelease>")
            master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            # if master.config_init() > 0:
            #     master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))

            # for device in master.slaves:
            #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            pass

        def quickstopEBR(event):
            jRbutton.unbind("<ButtonRelease>")
            master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            # if master.config_init() > 0:
            #     master.slaves[0].sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))

            # for device in master.slaves:
            #     device.sdo_write(0x6040, 0, bytes(ctypes.c_uint16(271)))
            pass

        def jogLEB(event):
            jogL()
            jLbutton.bind("<ButtonRelease>", quickstopEBL)
            pass

        def jogREB(event):
            jogR()
            jRbutton.bind("<ButtonRelease>", quickstopEBR)
            pass

        # ***************************************************************************

        global pavvalue
        global jbtn
        global abtn

        frame1 = Frame(self.root, highlightbackground="blue", highlightthickness=1, bg="#b3ffe0")
        Button(frame1, text="change", command=rtest2f, padx=30, pady=10, bg="#ff6666", fg="white").grid(row=0, column=0,
                                                                                                        padx=10,
                                                                                                        pady=10)
        # logoimg = ImageTk.PhotoImage(
        #     Image.open('sukrit_Logo.png').resize((150, 70), Image.Resampling.LANCZOS))
        # Label(frame1, image=logoimg, bg="#b3ffe0").grid(row=0, column=0)
        Label(frame1, text="               ", font="Algerian 27 bold", padx=7, pady=7, bg="#b3ffe0").grid(row=0,
                                                                                                          column=1,
                                                                                                          padx=10)
        Entry(frame1, font="Calibri 11", width=11).grid(row=0, column=2)
        Label(frame1, text="Servo Window", fg="#cc3300", font="Algerian 27 bold", padx=7, pady=7, bg="#b3ffe0").grid(
            row=0,
            column=3,
            padx=10)
        frame1.grid(row=0, ipadx=50, sticky="ew")
        frame2 = Frame(self.root, bg="blue", height=15)
        # wlabel=Label(frame2,text="",bg="blue",height=10).grid(row=1)
        frame2.grid(row=1, ipadx=400, sticky='ew')

        frame3 = Frame(self.root, highlightbackground="blue", width=300, height=100, highlightthickness=2, bg="#b3ffe0")

        frame4 = Frame(frame3, highlightbackground="blue", width=50, height=100, highlightthickness=0, bg="#b3ffe0")
        Label(frame4, text="Target Position", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=0, column=0)
        tpvalue = StringVar()

        Entry(frame4, width=10, font="Arial_Black 12 bold", ).grid(row=0, column=1)
        Button(frame4, text="Send", padx=30, pady=10, bg="blue", fg="white").grid(row=0, column=1, padx=10, pady=10)
        Label(frame4, text="Postion Actual Value", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=0, column=3)
        pavvalue = StringVar()
        pavvalue.set(pavr)
        Entry(frame4, width=10, textvariable=pavvalue, font="Arial_Black 12 bold", ).grid(row=0, column=4)
        frame4.grid(row=1, column=0, ipadx=33.5, sticky="w")

        frame7 = Frame(frame3, highlightbackground="blue", width=50, height=90, highlightthickness=1, bg="#b3ffe0")
        Label(frame7, text="Mode", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=0, column=0)

        jbtn = Button(frame7, command=writejogM, text="Jog", padx=30, pady=10, bg="blue", fg="white")
        jbtn.grid(row=0, column=1, padx=10, pady=10)
        Button(frame7, command=poweronJ, text="Servo On", padx=30, pady=10, bg="green", fg="white").grid(row=0,
                                                                                                         column=2,
                                                                                                         padx=10,
                                                                                                         pady=10)
        Button(frame7, command=hold, text="Hold", padx=30, pady=10, bg="Tan", fg="black").grid(row=0, column=3, padx=10,
                                                                                               pady=10)
        jLbutton = Button(frame7, text="<--", padx=30, pady=10, bg="#ff9933", )
        jLbutton.bind("<ButtonPress>", jogLEB)
        jLbutton.bind("<ButtonRelease-1>", quickstopEBL)
        jLbutton.grid(row=1, column=1, padx=10, pady=10)

        jRbutton = Button(frame7, text="-->", padx=30, pady=10, bg="#ff9933", )
        jRbutton.bind("<Button-1>", jogREB)
        jRbutton.bind("<ButtonRelease-1>", quickstopEBR)
        jRbutton.grid(row=1, column=2, padx=10, pady=10)
        Button(frame7, command=quickstop, text="Quick Stop", padx=30, pady=10, bg="red", fg="white").grid(row=1,
                                                                                                          column=3,
                                                                                                          padx=10,
                                                                                                          pady=10)
        Label(frame7, text="Speed", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=2, column=0)
        jspeedvalue = StringVar()
        Entry(frame7, textvariable=jspeedvalue, width=10, font="Arial_Black 12 bold", ).grid(row=2, column=1)
        Label(frame7, text="(mm/s)", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=2, column=2)
        Button(frame7, command=writejog, text="Send", padx=30, pady=10, bg="blue", fg="white").grid(row=2, column=3,
                                                                                                    padx=10, pady=10)
        frame7.grid(row=2, column=0, ipadx=72, sticky="w")

        frame8 = Frame(frame3, highlightbackground="blue", width=50, height=90, highlightthickness=1, bg="#b3ffe0")
        Label(frame8, text="Move", font="Calibri 16 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=0, column=1)
        Label(frame8, text="Mode", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=1, column=0)
        abtn = Button(frame8, command=writeabsM, text="ABS", padx=30, pady=10, bg="blue", fg="white")
        abtn.grid(row=1, column=1, padx=10, pady=10)
        Button(frame8, command=poweronA, text="Power On", padx=30, pady=10, bg="green", fg="white").grid(row=1,
                                                                                                         column=2,
                                                                                                         padx=10,
                                                                                                         pady=10)
        Button(frame8, command=startmotorA, text="Start Motor", padx=30, pady=10, bg="yellow", fg="black").grid(row=1,
                                                                                                                column=3,
                                                                                                                padx=10,
                                                                                                                pady=10)
        Button(frame8, command=quickstopA, text="Quick Stop", padx=30, pady=10, bg="red", fg="white").grid(row=1,
                                                                                                           column=4,
                                                                                                           padx=10,
                                                                                                           pady=10)
        Button(frame8, command=hold, text="Hold", padx=30, pady=10, bg="Tan", fg="black").grid(row=1, column=5, padx=10,
                                                                                               pady=10)
        Label(frame8, text="Pos to Go", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=2, column=0)
        posvalue = StringVar()
        Entry(frame8, textvariable=posvalue, width=10, font="Arial_Black 12 bold", ).grid(row=2, column=1)
        Label(frame8, text="Speed", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=2, column=2)
        aspeedvalue = StringVar()
        Entry(frame8, textvariable=aspeedvalue, width=10, font="Arial_Black 12 bold", ).grid(row=2, column=3)
        Label(frame8, text="(mm/sec)", font="Calibri 13 bold", padx=7, pady=7, bg="#b3ffe0",
              fg="blue").grid(row=2, column=4)
        Button(frame8, command=writeabs, text="Send", padx=30, pady=10, bg="blue", fg="white").grid(row=2, column=5,
                                                                                                    padx=10, pady=10)
        frame8.grid(row=3, column=0, ipadx=72, sticky="w")
        frame3.grid(row=2, column=0, ipadx=33.5, sticky="ew")

        frame5 = Frame(self.root, bg="blue", height=10)
        frame5.grid(row=3, ipadx=400, sticky='ew')

        frame6 = Frame(self.root, highlightbackground="blue", highlightthickness=0, bg="#b3ffe0")

        Button(frame6, command=poweron, text="Power On", padx=30, pady=10, bg="green", fg="white").grid(row=2, column=0,
                                                                                                        padx=10,
                                                                                                        pady=10)
        Button(frame6, command=startmotor, text="Start Motor", padx=30, pady=10, bg="yellow", fg="black").grid(row=2,
                                                                                                               column=1,
                                                                                                               padx=10,
                                                                                                               pady=10)
        Button(frame6, command=quickstop, text="Quick Stop", padx=30, pady=10, bg="red", fg="white").grid(row=2,
                                                                                                          column=2,
                                                                                                          padx=10,
                                                                                                          pady=10)

        frame6.grid(row=4, ipadx=20, sticky='ew')
        # tp10 = Thread(target=upread)
        # tp10.name='r11t'
        # # set daemon: polling thread will exit if main thread exit
        # tp10.daemon = True
        # if not tp10.is_alive():
        #     tp10.start()

        thread11 = rtest10()
        thread11.start()

        self.root.mainloop()
        return upread()


if __name__ == '__main__':
    pl = rtest10()
    pl.rtest10Frame()