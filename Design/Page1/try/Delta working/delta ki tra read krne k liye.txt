import numpy
from pyModbusTCP.client import ModbusClient
from pyModbusTCP.utils import encode_ieee, decode_ieee, \
                              long_list_to_word, word_list_to_long
import numpy as np

class FloatModbusClient(ModbusClient):
    """A ModbusClient class with float support."""

    def read_float(self, address, number=1):
        """Read float(s) with read holding registers."""
        reg_l = self.read_holding_registers(address, number * 2)
        if reg_l:
            return [decode_ieee(f) for f in word_list_to_long(reg_l)]
        else:
            return None

    def read_floatrev(self, address, number=1):
        """Read float(s) with read holding registers."""
        reg_l = self.read_holding_registers(address, number * 2)
        if reg_l:
            reg_l.reverse()
            return [decode_ieee(f) for f in word_list_to_long(reg_l)]
        else:
            return None

    def write_float(self, address, floats_list):
        """Write float(s) with write multiple registers."""
        b32_l = [encode_ieee(f) for f in floats_list]
        b16_l = long_list_to_word(b32_l)
        return self.write_multiple_registers(address, b16_l)


if __name__ == '__main__':
    # init modbus client
    c = FloatModbusClient(host='192.168.1.77', port=502, auto_open=True)

    # write 10.0 at @0
    #c.write_float(0, [10.0])

    # read @0 to 9
    float_l = c.read_float(4296, 1)
    print(float_l)

    print("Try to understand")
    address=4296
    number=1
    reg=c.read_holding_registers(address, number * 2)
    arr = np.array(reg)
    print('value of float_l:',float_l)
    print('value of reg',reg)
    print("type of reg",type(reg))
    print("register",reg[0],reg[1])
    print(type(reg[0]),type(reg[1]))
    print('reg as Array:', arr)
    print('Datatype of reg in numpy:', arr.dtype)
    x=word_list_to_long(reg)
    for f in word_list_to_long(reg):
        print("word_list to long: ",f)
        print(decode_ieee(f))
    print("---")
    print("reverse value")
    regr=[]
    regr.append(reg[1])
    regr.append(reg[0])
    print("reverse of reg:",regr)
    y=word_list_to_long(regr)
    for g in word_list_to_long(regr):
        print("word_list to long:",g)
        print(decode_ieee(g))

    print("------------testing reverse function of list-----------")
    print(reg)
    reg.reverse()
    a=reg
    print(a)

    print("------------------reverse function of class-----------------")
    float_lrr = c.read_floatrev(4296, 1)
    print(float_lrr)






    c.close()