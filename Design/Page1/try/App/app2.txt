import numpy


from pyModbusTCP.client import ModbusClient
from pyModbusTCP.utils import encode_ieee, decode_ieee, \
                              long_list_to_word, word_list_to_long


class FloatModbusClient(ModbusClient):
    """A ModbusClient class with float support."""

    def read_float(self, address, number=1):
        """Read float(s) with read holding registers."""
        reg_l = self.read_holding_registers(address, number * 2)
        if reg_l:
            return [decode_ieee(f) for f in word_list_to_long(reg_l)]
        else:
            return None

    def read_float1(self, address, number=1):
        """Read float(s) with read holding registers."""
        reg_l = self.read_holding_registers(address, number * 2)
        if reg_l:
            return [decode_ieee(f) for f in word_list_to_long(reg_l.reverse())]
        else:
            return None

    def write_float(self, address, floats_list):
        """Write float(s) with write multiple registers."""
        b32_l = [encode_ieee(f) for f in floats_list]
        b16_l = long_list_to_word(b32_l)
        return self.write_multiple_registers(address, b16_l)


if __name__ == '__main__':
    # init modbus client
    c = FloatModbusClient(host='192.168.1.77', port=502, auto_open=True)

    # write 10.0 at @0
    #c.write_float(4676, [31690])

    # read @0 to 9
    float_l = c.read_float(4296, 1)
    float_lr = c.read_float(4296, 1)
    float_l1 = c.read_float(4297, 1)
    print(float_l)
    print("reverse")
    print(float_lr)
    a=float_l1[0]
    print(a)
    print("reg float1",float_l1)

    c.close()





reg_l = c.read_holding_registers(4296, 2)
print(reg_l)
tmp=numpy.array( reg_l)
tmp.dtype = numpy.float32
print (tmp)